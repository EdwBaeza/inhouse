// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package homepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomeServiceClient is the client API for HomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeServiceClient interface {
	GetHome(ctx context.Context, in *GetHomeRequest, opts ...grpc.CallOption) (*Home, error)
	SaveHome(ctx context.Context, in *Home, opts ...grpc.CallOption) (*HomeResponse, error)
	ListHomes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HomeService_ListHomesClient, error)
	SaveHomes(ctx context.Context, opts ...grpc.CallOption) (HomeService_SaveHomesClient, error)
}

type homeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeServiceClient(cc grpc.ClientConnInterface) HomeServiceClient {
	return &homeServiceClient{cc}
}

func (c *homeServiceClient) GetHome(ctx context.Context, in *GetHomeRequest, opts ...grpc.CallOption) (*Home, error) {
	out := new(Home)
	err := c.cc.Invoke(ctx, "/homepb.HomeService/GetHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) SaveHome(ctx context.Context, in *Home, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/homepb.HomeService/SaveHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) ListHomes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HomeService_ListHomesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HomeService_ServiceDesc.Streams[0], "/homepb.HomeService/ListHomes", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeServiceListHomesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeService_ListHomesClient interface {
	Recv() (*Home, error)
	grpc.ClientStream
}

type homeServiceListHomesClient struct {
	grpc.ClientStream
}

func (x *homeServiceListHomesClient) Recv() (*Home, error) {
	m := new(Home)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *homeServiceClient) SaveHomes(ctx context.Context, opts ...grpc.CallOption) (HomeService_SaveHomesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HomeService_ServiceDesc.Streams[1], "/homepb.HomeService/SaveHomes", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeServiceSaveHomesClient{stream}
	return x, nil
}

type HomeService_SaveHomesClient interface {
	Send(*Home) error
	Recv() (*HomeResponse, error)
	grpc.ClientStream
}

type homeServiceSaveHomesClient struct {
	grpc.ClientStream
}

func (x *homeServiceSaveHomesClient) Send(m *Home) error {
	return x.ClientStream.SendMsg(m)
}

func (x *homeServiceSaveHomesClient) Recv() (*HomeResponse, error) {
	m := new(HomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeServiceServer is the server API for HomeService service.
// All implementations must embed UnimplementedHomeServiceServer
// for forward compatibility
type HomeServiceServer interface {
	GetHome(context.Context, *GetHomeRequest) (*Home, error)
	SaveHome(context.Context, *Home) (*HomeResponse, error)
	ListHomes(*Empty, HomeService_ListHomesServer) error
	SaveHomes(HomeService_SaveHomesServer) error
	mustEmbedUnimplementedHomeServiceServer()
}

// UnimplementedHomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeServiceServer struct {
}

func (UnimplementedHomeServiceServer) GetHome(context.Context, *GetHomeRequest) (*Home, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHome not implemented")
}
func (UnimplementedHomeServiceServer) SaveHome(context.Context, *Home) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHome not implemented")
}
func (UnimplementedHomeServiceServer) ListHomes(*Empty, HomeService_ListHomesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHomes not implemented")
}
func (UnimplementedHomeServiceServer) SaveHomes(HomeService_SaveHomesServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveHomes not implemented")
}
func (UnimplementedHomeServiceServer) mustEmbedUnimplementedHomeServiceServer() {}

// UnsafeHomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServiceServer will
// result in compilation errors.
type UnsafeHomeServiceServer interface {
	mustEmbedUnimplementedHomeServiceServer()
}

func RegisterHomeServiceServer(s grpc.ServiceRegistrar, srv HomeServiceServer) {
	s.RegisterService(&HomeService_ServiceDesc, srv)
}

func _HomeService_GetHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).GetHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homepb.HomeService/GetHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).GetHome(ctx, req.(*GetHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_SaveHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Home)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).SaveHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homepb.HomeService/SaveHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).SaveHome(ctx, req.(*Home))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_ListHomes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeServiceServer).ListHomes(m, &homeServiceListHomesServer{stream})
}

type HomeService_ListHomesServer interface {
	Send(*Home) error
	grpc.ServerStream
}

type homeServiceListHomesServer struct {
	grpc.ServerStream
}

func (x *homeServiceListHomesServer) Send(m *Home) error {
	return x.ServerStream.SendMsg(m)
}

func _HomeService_SaveHomes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HomeServiceServer).SaveHomes(&homeServiceSaveHomesServer{stream})
}

type HomeService_SaveHomesServer interface {
	Send(*HomeResponse) error
	Recv() (*Home, error)
	grpc.ServerStream
}

type homeServiceSaveHomesServer struct {
	grpc.ServerStream
}

func (x *homeServiceSaveHomesServer) Send(m *HomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *homeServiceSaveHomesServer) Recv() (*Home, error) {
	m := new(Home)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeService_ServiceDesc is the grpc.ServiceDesc for HomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homepb.HomeService",
	HandlerType: (*HomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHome",
			Handler:    _HomeService_GetHome_Handler,
		},
		{
			MethodName: "SaveHome",
			Handler:    _HomeService_SaveHome_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHomes",
			Handler:       _HomeService_ListHomes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveHomes",
			Handler:       _HomeService_SaveHomes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apps/grpc/protos/homepb/home.proto",
}
